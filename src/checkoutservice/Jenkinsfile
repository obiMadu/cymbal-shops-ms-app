def isSubfolderChanged() {
    def changedFiles = []
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            changedFiles.addAll(entry.affectedFiles.collect { it.path })
        }
    }
    return changedFiles.any { it.startsWith('src/checkoutservice/') }
}

pipeline {
    agent {
        label 'ubuntu'
    }

    triggers {
        pollSCM('')
    }

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('cymbal-shops-docker-hub-credentials')
        DOCKER_IMAGE_NAME = "checkoutservice"
        DOCKER_IMAGE_TAG = "latest"
        JFROG_CR_USERNAME = "cymbal-shops"
        DOCKER_HUB_USERNAME = "obimadu"
        DOCKER_HUB_IMAGE = "${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
        JFROG_CR_IMAGE = "${JFROG_CR_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
        SONARQUBE_PROJECT_ID = "cymbal-checkoutservice"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Check for Changes') {
            steps {
                script {
                    if (!isSubfolderChanged()) {
                        println('No changes detected in the specified subfolder. Skipping pipeline execution.')
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            when {
                expression { isSubfolderChanged() }
            }
            steps {
                dir('src/checkoutservice') {
                    withSonarQubeEnv(installationName: 'SonarQube', credentialsId: 'sonarqube-token-90') {
                        script {
                            def scannerHome = tool 'SonarQubeScanner'
                            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${SONARQUBE_PROJECT_ID}"
                        }
                    }
                }
            }
        }

        stage('Build and Tag Container Image') {
            when {
                expression { isSubfolderChanged() }
            }
            steps {
                dir('src/checkoutservice') {
                    script {
                        dockerImage = docker.build("${JFROG_CR_IMAGE}")

                        // Tag for Docker Hub
                        dockerImage.tag("${DOCKER_HUB_IMAGE}")
                    }
                }
            }
        }

        stage('Scan with Trivy') {
            when {
                expression { isSubfolderChanged() }
            }
            environment {
                TRIVY_DB_REPOSITORY = "public.ecr.aws/aquasecurity/trivy-db"
                TRIVY_JAVA_DB_REPOSITORY = "public.ecr.aws/aquasecurity/trivy-java-db"
            }
            steps {
                script {
                    sh "trivy image --severity HIGH,CRITICAL ${JFROG_CR_IMAGE}"
                }
            }
        }

        stage('Push Image to Jfrog Container Registry') {
            when {
                expression { isSubfolderChanged() }
            }
            steps {
                script {
                    docker.withRegistry('https://artifactory.obi.ninja', 'jfrog-cymbal-shops') {
                        docker.image("${JFROG_CR_IMAGE}").push()
                    }
                }
            }
        }

        stage('Push Image to Docker Hub') {
            when {
                expression { isSubfolderChanged() }
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-cymbal-shops') {
                        docker.image("${DOCKER_HUB_IMAGE}").push()
                    }
                }
            }
        }
    }
}
